/**
 * Created by ZhangHui on 2018/6/12.
 */
class TG_ItemEffect extends TG_Item{
    private sp1:egret.Sprite;
    private sp2:egret.Sprite;

    /*普通元素块*/
    public constructor(){
        super();
        this.sp1 = new egret.Sprite();
        this.sp2 = new egret.Sprite();
        this.addChild(this.sp1)
        this.addChild(this.sp2)

    }
    /*创建对象*/
    public text:egret.TextField;
    public Create(id2,id7,row,col,EffectType=Msg.EffectType.ET_none){
        //寻找随机快处理
        id2 = LoadNetworkImageUtils.getRandom_LayerId(id2);

        this.SetEffectType(EffectType);
        let layeridStr = id2.toString();
        let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let color=obj.color;
        this.SetColorType(color);
        this.itemType = obj.itemType;
        this.IsBirdPriorityTarget=false;
        // 设置毛球附着物
        if (id7 > 0) {// 毛球id
            this.isMove = false;
            this.SetVenonatId(id7);
            let obj = TG_CreateItem.CreateHairBall(id7, row, col);
            this.sp2.addChild(obj);
            let num = Number(id7%10);
            if ( num == 0){
                this.CanAroundDetonate = false;
            }
            if ( num == 1){
                this.CanAroundDetonate = true;
            }
            if ( num == 2){
                this.CanAroundDetonate = false;
            }

        } else {
            // 没有毛球
            this.SetVenonatId(0);
        }
        switch (EffectType){
            case Msg.EffectType.ET_none:
                this.CreateItem(id2,row,col);
                break;
            case Msg.EffectType.ET_Hor:
                //纵向四连形成的横消块
                this.createItemET_Hor(id2,row,col);
                break;
            case Msg.EffectType.ET_Vel:
                //横向四连形成的纵消块
                this.createItemET_Ver(id2,row,col);
                break;
            // case Msg.EffectType.ET_ChangeColor:
            //     //变色块
            //     this.createItemET_ChangeColor(id2,row,col);
            //     break;
            case Msg.EffectType.ET_Black:
                //黑洞
                this.CreateET_Black(id2,row,col);
                break;
            case Msg.EffectType.ET_Gold:
                //炸弹
                this.CreateET_Gold(id2,row,col);
                break;
            case Msg.EffectType.ET_Bird:
                //风车
                this.CreateET_Bird(id2,row,col);
                break;
            default:
                break;
        }

        this.text = new ImageTextShow().drawText(this.item.width,this.item.height);
        if(this.text){
            this.sp1.addChild(this.text);
        }
        return this.item;
    }
    //创建普通的元素块
    private createItem(str,layerid,row,col){
        this.item=TG_Object.Create(str);
        this.sp1.addChild(this.item);
        this.SetSitPos(col,row);
        this.SetBlockId(layerid);
        this.SetMarkedHor(0);
        this.SetMarkedVel(0);
        this.SetItemWidth(this.item.width);
        this.createText();
        this.initItemW_H();//初始化宽高
    }
    //创建文本 用于显示加步数或者时间
    private text1:egret.TextField;
    private createText()
    {
        if(this.isFunction)
        {
            this.text1 = new egret.TextField();
            this.text1.textAlign = "center";
            this.text1.size = 45;
            this.text1.textColor = 0xffb24a;
            this.text1.bold = true;
            this.text1.strokeColor = 0x000000;
            this.text1.stroke = 2;
            this.text1.text = "+" +  this.extendParam;
            this.text1.height = this.text1.textHeight;
            this.text1.width  = this.text1.textWidth;
            this.text1.x = this.item.x + this.item.width - this.text1.width -5;
            this.text1.y = this.item.y + this.item.height - this.text1.height -5;
            this.sp1.addChild( this.text1);
        }
    }

    //创建箭头
    private arrows;
    private createArrows(type){
        let str="";
        if(type==0){
            //横向的箭头
            str="item_h_tip_png";
        }else {
            //纵向的箭头
            str="item_v_tip_png";
        }
        this.arrows=TG_Object.Create(str);
        this.sp1.addChild(this.arrows);
        this.arrows.width=this.item.width;
        this.arrows.height=this.item.height;
        Tool.getInstance().setAnchorPoint(this.arrows);
        this.arrows.x=this.item.width/2;
        this.arrows.y=this.item.height/2;
        egret.Tween.get(this.arrows,{loop:true}).to({scaleX:1.1,scaleY:1.1},400).to({scaleX:1,scaleY:1},200);
    }
    private CreateItem(layerid,row,col){
        let layeridStr = layerid.toString();
        let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let str= LoadNetworkImageUtils.getResNameByLayerId(layerid); // LoadNetworkImageUtils.getResNameByLayerId(layerid);
        // let extendType:number = parseInt(obj.extendType);

        if(obj.extendType > 0)
        {
            //带加步数的功能块
            this.isFunction = true;
            this.extendType = obj.extendType;
            this.extendParam = obj.extendParam;
            this.createItem(str,layerid,row,col);
        }
        else
        {
            this.createItem(str,layerid,row,col);
        }

    }
    //横向四连的元素块
    private createItemET_Hor(layerid,row,col){
        //普通块
        let layeridStr = layerid.toString();
        let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let str=LoadNetworkImageUtils.getResNameByLayerId(layerid);
        this.createItem(str,layerid,row,col);
        //箭头
        this.createArrows(0);
    }
    //纵向四连的元素块
    private createItemET_Ver(layerid,row,col){
        //普通块
        let layeridStr = layerid.toString();
        let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let str=LoadNetworkImageUtils.getResNameByLayerId(layerid);
        this.createItem(str,layerid,row,col);
        //箭头
        this.createArrows(1);
    }
    //创建变色块元素块
    private createItemET_ChangeColor(layerid,row,col){
        //普通块
        let layeridStr = layerid.toString();
        // let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let str=LoadNetworkImageUtils.getResNameByLayerId(layerid);
        this.createItem(str,layerid,row,col);
    }

    //黑洞的元素块
    private CreateET_Black(layerid,row,col){
        //普通块
        let layeridStr = layerid.toString();
        let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let str=LoadNetworkImageUtils.getResNameByLayerId(layerid);
        this.createItem(str,layerid,row,col);
    }
    //炸弹的元素块
    private CreateET_Gold(layerid,row,col){
        //普通块
        let layeridStr = layerid.toString();
        let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let str=LoadNetworkImageUtils.getResNameByLayerId(layerid);
        this.createItem(str,layerid,row,col);
    }
    //风车的元素块
    private CreateET_Bird(layerid,row,col){
        let layeridStr = layerid.toString();
        let obj=TG_MapData.getInstance().mapConfigData[layeridStr];
        let str = LoadNetworkImageUtils.getResNameByLayerId(layerid);
        this.createItem(str,layerid,row,col);
    }
    public IsEffectAlreadyExplode=false;
    public SecondBoomSuper=false;
    public BulletPos;//形成子弹时的坐标点
    public SetAlreadyExplode(flag){
        this.IsEffectAlreadyExplode = flag;
    }
    public GetAlreadyExplode(){
        return this.IsEffectAlreadyExplode;
    }
    public SetSecondBoomSuper(flag){
        this.SecondBoomSuper = flag;
    }
    public GetSecondBoomSuper(){
        return this.SecondBoomSuper;
    }
    public SetIsBullet(flag){
        this.IsBullet=flag;
    }
    public GetIsBullet(){
        return this.IsBullet;
    }
    public SetBulletPos(pos){
        this.BulletPos=pos;
    }
    public GetBulletPos(){
        return this.BulletPos;
    }


    /*普通爆炸*/
    public DoExplode(isDetonate=false,IsInfectVenom=false){
        //isDetonate 是否被引爆
        //IsInfectVenom 是否是被毒液感染爆炸
        if(this.GetVenonatId() <= 0 )
        {
            this.SetIsInfectVenom(IsInfectVenom);
            //设置爆炸状态为true
            this.SetExploding(true);
            if(isDetonate){
                if(!this.IsEffectGold()){
                    this.isDetonate=true;
                }
            }
            TG_Game.getInstance().DoExplode(this);
        }
        else
        {
            //处理毛球逻辑
            if(this.GetVenonatId() == 7001)//白毛球
            {
                this.SetVenonatId(0);
                this.isMove = true;
                let hair:TG_ItemHairBall =  this.sp2.getChildAt(0) as TG_ItemHairBall;
                // 游戏中，飞到消除目标位置的动画
                TG_Game.getInstance().ItemFlyToGoal(hair);
                //加分数
                TG_Game.getInstance().AddScore(ScoreType.ST_ExplodeHairBall);
                if(hair)
                {
                    hair.Release();
                }
                this.CanAroundDetonate = false;
                this.sp2.removeChildren();
            }
            else//
            {
                this.SetDetonate2(true);
            }
        }

    }

    /**
     * 黑色毛球爆破
     * @constructor
     */
    public DoExplodeHairBall()
    {
        this.SetVenonatId(this.GetVenonatId()-1);
        let hair:TG_ItemHairBall =  this.sp2.getChildAt(0) as TG_ItemHairBall;
        // 游戏中，飞到消除目标位置的动画
        TG_Game.getInstance().ItemFlyToGoal(hair);
        //加分数
        TG_Game.getInstance().AddScore(ScoreType.ST_ExplodeHairBall);
        if(hair)
        {
            hair.Release();
        }
        this.CanAroundDetonate = true;
        this.sp2.removeChildren();
        let newVenatId = this.GetVenonatId();
        let obj = TG_CreateItem.CreateHairBall(newVenatId, this.SitePos.Y, this.SitePos.X);
        this.sp2.addChild(obj);
        App.MessageCenter.dispatch(Msg.Event.CreateHairBall,this.SitePos);
    }
    public changeColor(layerid){
        let str= LoadNetworkImageUtils.getResNameByLayerId(layerid);
        this.item.texture = RES.getRes(str);
        this.SetBlockId(layerid);
        let obj=TG_MapData.getInstance().mapConfigData[layerid];
        let color=obj.color;
        this.SetColorType(color);
    }
    /**
     * 取出毛球
     */
    public getHairBall():TG_ItemHairBall
    {
        let hair:TG_ItemHairBall = null;
        if(this.sp2.numChildren > 0)
            hair = this.sp2.getChildAt(0) as TG_ItemHairBall;

        return hair;
    }

    /**
     *  添加毛球
     * @param hair
     */
    public addHairBall(hair)
    {
        if(hair)
            this.sp2.addChild(hair);
    }
    public  CreateHair()
    {
        this.isMove = false;
        this.SetVenonatId(7001);
        this.CanAroundDetonate = true;
        this.sp2.removeChildren();
        let newVenatId = this.GetVenonatId();
        let obj = TG_CreateItem.CreateHairBall(newVenatId, this.SitePos.Y, this.SitePos.X);
        this.sp2.addChild(obj);
        obj.scaleX=obj.scaleY=.1;
        egret.Tween.get(obj).to({scaleX:1.2,scaleY:1.2},500).to({scaleX:1,scaleY:1},200).call(function () {
            if(obj){
                egret.Tween.removeTweens(obj);
            }
        }.bind(this),this);
    }
    /*移除对象*/
    public Release(){
        this.SecondBoomSuper=false;
        this.IsEffectAlreadyExplode=false;
        if(this.item){
            TG_Object.Release(this.item);
            this.item=null;
        }
        if(this.arrows){
            egret.Tween.removeTweens(this.arrows);
            TG_Object.Release(this.arrows);
            this.arrows=null;
        }
    }

    /*改变文字*/
    public changeText(row,col,rowMarkNum=0,colMarkNum=0){
        if(this.text){
            this.text.text="["+col+","+row+"]"+"\n"+"【"+colMarkNum+","+rowMarkNum+"】";
        }
    }


}