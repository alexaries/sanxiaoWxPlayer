
/**
 * Created by ZhangHui on 2018/6/1.
 */
class GamePanel extends Panel_GameLayer{
    /*单例*/
    private static gamePanel:GamePanel;
    public static getInstance(){
        if(!this.gamePanel){
            this.gamePanel=new GamePanel();
        }
        return this.gamePanel;
    }
    public initModule():void
    {
        //初始化道具模块
        App.ControllerManager.register(ControllerConst.Prop,new PropController());
        App.ControllerManager.register(ControllerConst.Title,new GameTitleController());
        App.ControllerManager.register(ControllerConst.GameExit,new ExitController());
        
    }
    /*实例化视图*/
    public initGamePanel()
    {
        this.initModule();
        App.MessageCenter.addListener(Msg.Event.BeginGame, this.initRect,this);
        App.MessageCenter.addListener(Msg.Event.BeginGame2, this.beginTitle,this);

        // App.MessageCenter.addListener(Msg.Event.IsGameOver,this.GameOver,this);
        // let arr = [10101,10102,0,0,10201,0,10202,0,0,0];
        // this.addChild(new TG_Role_Model(2,arr));
        //
        //
        // return;
        // this.addChild( ObjectPool.pop("TG_Role_Model",arr))
        //游戏背景层
        this.initBg();
        //方块
        this.initRect();


        // (this.addChild(GamePanel_BeforeStart2.getInstance()) as GamePanel_BeforeStart2).init();
    }
    public GameOver(over)
    {
        if(over)
        {

        }
    }
    //游戏结束界面
    private gameOver:GameOver_View;
    public showGameOver(type:number)
    {
        this.gameOver = this.addChild(GameOver_View.getInstance()) as GameOver_View;
        this.gameOver.init(type);
    }
    //游戏内目标任务
    private gameTitle:GamePanel_Title;
    private initTitle()
    {
        this.gameTitle = this.addChild(GamePanel_Title.getInstance()) as GamePanel_Title;
        this.gameTitle.initView();
    }
    /*实例化背景层*/
    private gameBgSp;
    private initBg(){
        this.gameBgSp=this.addChild(GamePanel_BgSp.getInstance());
        //实例化背景
        this.gameBgSp.initView();
    }
    public clearPanel()
    {
        if(this.gameOver)
            this.gameOver.removeself();
        if(this.gameTitle)
            this.gameTitle.removeself();
        if(this.rectSp)
        {
            this.rectSp.clearAll();
            this.rectSp.removeself();
        }
        if(this.bg){
            this.removeChild(this.bg);
            this.bg=null;
        }
        if(this.shape){
            this.shape.graphics.clear();
            this.removeChild(this.shape);
            this.shape=null;
        }
        if(this.skipRollBtn){
            this.removeChild(this.skipRollBtn);
            this.skipRollBtn=null;
        }
    }
    /*实例化初始地图方块*/
    public rectSp:GamePanel_ItemSp;
    private shape:egret.Shape;
    private bg:egret.Bitmap;
    public initRect(){
        this.clearPanel();
        //棋盘背景
        this.bg = new egret.Bitmap(RES.getRes("game_bg3_png"));
        this.addChild(this.bg);
        //棋盘元素块
        this.rectSp = GamePanel_ItemSp.getInstance();
        this.addChild(this.rectSp);
        this.rectSp.initMapRect();

        App.MessageCenter.addListener(Msg.Event.GameResize,this.resize,this);
        this.resize();
        //监听创建游戏中元素块
        App.MessageCenter.addListener(Msg.Event.CreateGameItem,this.initGameRect,this);
        //监听棋盘滚动事件
        App.MessageCenter.addListener(Msg.Event.BrowseGameBeginRoll,this.browseGameBeginRoll,this);
        //监听棋盘向上滚动
        App.MessageCenter.addListener(Msg.Event.BrowseRollUp,this.browseRollUp,this);

        // this.initTitle();
        App.MessageCenter.dispatch(Msg.Event.BeginGame2)//统一放这里调用开始
    }

    /*棋盘的显示遮罩*/
    private initRectSpShape(){
        if(this.shape)
        {
            return;
        }
        //遮罩
        this.shape=new egret.Shape();
        this.shape.graphics.beginFill(0xff0000);
        this.shape.graphics.drawRect(0,0,this.rectSp.width,this.rectSp.width+35);
        this.shape.graphics.endFill();
        this.addChild(this.shape);
        this.shape.x = this.bg.x+5;
        this.shape.y = this.bg.y+5;
        this.rectSp.mask= this.shape;
    }
    /*创建游戏中的元素块*/
    private initGameRect(){
        GamePanel_ItemSp.getInstance().initRect();
        this.resize();
        this.initRectSpShape();
        this.beginGame();
        App.MessageCenter.dispatch(Msg.Event.GameResize);
        App.MessageCenter.dispatch(Msg.Event.cleatDoStartDrop);
    }
    /*棋盘滚动*/
    private skipRollBtn:eui.Button;
    private curRollRow=0;//当前行
    private realRollRow=0;//滚动行数
    public browseGameBeginRoll(num){
        //browseLineNum 滚动行数
        Log.getInstance().trace("棋盘滚动的行数:___"+num);
        let height=TG_Item.getInstance().itemWidth+1.5;
        let rollRowTotal=9+num;
        this.realRollRow=0;
        this.curRollRow=rollRowTotal-12>=0?rollRowTotal-12:0;
        this.createBeginRollItem(12);
        this.resize();
        this.initRectSpShape();
        //每行滚动的时间
        let singleRowRollTime= TG_TimeDefine.GetTimeDelay(TG_TimeDefine.SingleRowRollDelay);
        let vy=(rollRowTotal-4)*height+10;
        egret.Tween.get(this.rectSp).to({y:vy},singleRowRollTime*(num-1)).call(function () {
            egret.Tween.removeTweens(this.rectSp);
            this.removeSkipBtn();
        }.bind(this),this);
        if (num>3){
            App.TimerManager.doTimer(singleRowRollTime,num-3,this.createBeginRollItemTimer,this);
        }
        App.ViewManager.close(ViewConst.Prop,this.bg);
        //跳过滚动按钮
        this.skipRollBtn=new eui.Button();
        this.addChild(this.skipRollBtn);
        this.skipRollBtn.anchorOffsetX=this.skipRollBtn.width/2;
        this.skipRollBtn.anchorOffsetY=this.skipRollBtn.height/2;
        this.skipRollBtn.x=Main.stageWidth/2;
        this.skipRollBtn.y=this.bg.y+this.bg.height+this.skipRollBtn.height;
        this.skipRollBtn.label="跳过滚动";
        this.skipRollBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,this.skipRollBtnEvent,this);
    }
    private createBeginRollItemTimer(){
        this.createBeginRollItem(1);
    }
    //移除
    public ClearBeginRollItemRow(){
        for(let temp of this.cRollClearItems){
            if(temp!=undefined){
                App.DisplayUtils.removeFromParent(temp);
                TG_Object.Release(temp);
            }
        }
        this.cRollClearItems=[];
    }
    public cRollClearItems=[];
    /*开始滚动时的创建*/
    public createBeginRollItem(num){
        this.cRollClearItems=[];
        //移除
        for(let i =0;i<9;i++){
            let button=TG_Game.Buttons[0];
            TG_Game.Buttons.splice(0,1);
            this.cRollClearItems.push(button);

            let item=TG_Game.Items[0];
            TG_Game.Items.splice(0,1);
            this.cRollClearItems.push(item);

            let ice=TG_Game.Ices[0];
            TG_Game.Ices.splice(0,1);
            this.cRollClearItems.push(ice);

            let mesh=TG_Game.Meshs[0];
            TG_Game.Meshs.splice(0,1);
            this.cRollClearItems.push(mesh);

            let cloud=TG_Game.Clouds[0];
            TG_Game.Clouds.splice(0,1);
            this.cRollClearItems.push(cloud);

            let railing=TG_Game.Railings[0];
            TG_Game.Railings.splice(0,1);
            this.cRollClearItems.push(railing);
        }
        this.ClearBeginRollItemRow();
        //创建
        for(let i=num*9-1;i>=0;i--){
            let index=i+this.curRollRow*9;
            let block=TG_Stage.Blocks[index];
            let row = 0, col = 0;
            row = Math.floor(Number(index) / 9)-this.curRollRow-3-this.realRollRow;
            col = Number(index) % 9;
            let Id1 = block["Id1"];
            let Id2 = block["Id2"];
            let Id3 = block["Id3"];
            let Id4 = block["Id4"];
            let Id5 = block["Id5"];
            let Id6 = block["Id6"];
            let Id7 = block["Id7"];
            // 创建地板层(第一层)
            GamePanel_ItemSp.getInstance().CreateButton(Id1,row,col,index,true);
            // 创建毛毛虫层（第二层）
            //  GamePanel_ItemSp.getInstance().CreateCaterpillars(Id2,row,col,true);
            // 创建冰层数据（第三层）
            GamePanel_ItemSp.getInstance().CreateIces(Id3,row,col,true);
            // 创建宝石层(包含毛球) （第四层)
            GamePanel_ItemSp.getInstance().CreateItems(Id2,Id7,row,col,true);
            // 创建网格层 铁丝网 （第五层)
            GamePanel_ItemSp.getInstance().CreateMeshs(Id4,row,col,true);
            // 创建毛球层 毛球与铁丝网互斥 毛球附着在消除块上(第六层)
            //  GamePanel_ItemSp.getInstance().CreateHairBall(Id2,Id7,row,col,true);
            // 创建栏杆层数据 (第六层)
            GamePanel_ItemSp.getInstance().CreateRailings(Id6,row,col,true);
            // 第七层 毛球层随方块一起创建
            //  GamePanel_ItemSp.getInstance().CreateHairBall(items,Id7,row,col,true);
            // 创建云层数据(第八层)
            GamePanel_ItemSp.getInstance().CreateClouds(Id5,row,col,true);
        }
        this.curRollRow-=1;
        this.realRollRow+=1;
    }
    /*棋盘向上滚动*/
    public browseRollUp(browseLineNum){
        let height=TG_Item.getInstance().itemWidth+1.5;
        let vy=this.rectSp.y-height*browseLineNum;
        let time= TG_TimeDefine.GetTimeDelay(TG_TimeDefine.SingleRowRollDelay)*browseLineNum;
        App.MessageCenter.dispatch(Msg.Event.IsGameOver,true);
        egret.Tween.get(this.rectSp).to({y:vy},time).call(function () {
            egret.Tween.removeTweens(this.rectSp);
            App.MessageCenter.dispatch(Msg.Event.IsGameOver,false);
            Log.getInstance().trace("游戏中棋盘滚动完毕...");
            //刷新数字显示
            TG_Game.getInstance().changeAllText();
        }.bind(this),this);
    }
    /*停止滚动按钮事件*/
    public skipRollBtnEvent(){
        App.TimerManager.remove(this.createBeginRollItemTimer,this);
        this.removeSkipBtn();
    }
    /*移除停止滚动按钮和打开道具*/
    private removeSkipBtn(){
        if(this.skipRollBtn){
            this.removeChild(this.skipRollBtn);
            this.skipRollBtn=null;
        }
        if(this.rectSp){
            egret.Tween.removeTweens(this.rectSp);
        }
        App.MessageCenter.dispatch(Msg.Event.IsGameOver,false);
        //派发移除滚动多余元素
        App.MessageCenter.dispatch(Msg.Event.ClearBeginRollItem);
    }

    //开始游戏事件
    public beginGame()
    {
         App.ViewManager.open(ViewConst.Prop,this.bg);
        this.resize();
    }

    //开启title
    private beginTitle(){
        App.ViewManager.open(ViewConst.Title);
        this.resize();
    }
    private resize()
    {
        if(this.rectSp)
        {

            this.rectSp.y = GameTitleController.getInstance().titleView.y +  GameTitleController.getInstance().titleView.thisheight;//this.gameBgSp.topBg.y + this.gameBgSp.topBg.height;
            this.rectSp.x = Main.stageWidth/2 - this.rectSp.width/2+10;

            this.bg.x=this.rectSp.x;
            this.bg.y=this.rectSp.y;
            this.bg.width=this.rectSp.width+10;
            this.bg.height=this.bg.width;

        }

    }



}