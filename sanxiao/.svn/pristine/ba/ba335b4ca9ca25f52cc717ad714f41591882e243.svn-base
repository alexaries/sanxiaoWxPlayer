/**游戏Title显示类
 *
 * Created by HuDe Zheng on 2018/8/07.
 */
class GameTitleView extends BaseEuiView {

    public backBtn:eui.Image;//返回按钮

    public roleGroup: Group;
    public maskGroup: Group;
    public shenglimubiao: Group;
    public winGroup: Group;

    public scoreBgBtn: eui.Image;
    public taskArr: Array<any> = [];
    public taskBArr: Array<any> = [];

    public roleSp: TG_Role_Model;
    public roleBSp:TG_Role_Model;
    //人物模型信息
    public roleArr: Array<any>;
    //人物性别 1女 2男
    public avatar: number;
    public avatarB:number;
    //游戏规则 0:消除 1:收集
    public ruleType: number;
    //收集部分容器
    private gatherSp: egret.Sprite;
    public taskItemArr: Array<GatherItem1> = [];//任务目标容器
    public taskBItemArr: Array<GatherItem1> = [];//任务目标容器B

    public ruleImg: eui.Image;//模式显示图片
    public thisheight: number = 0;

    public constructor(controller: BaseController, parent: eui.Group) {
        super(controller, parent);
        this.skinName = "game_titleUI";


        this.init();
        if (this.thisheight == 0)
            this.thisheight = this.height;
    }

    //开启面板 刷新数据
    public open(...param: any[]): void {
        super.open(param);
        this.refreshData()
        this.begin_times();//开始倒计时
        this.addEvent();
        if (this.thisheight == 0)
            this.thisheight = this.height;
    }

    public close(...param: any[]) {
        super.close(param)
        this.removeEvent();
        this.removeTesk();
    }

    public addEvent() {
        App.MessageCenter.addListener(Msg.Event.ItemFlyToGoal, this.ItemFlyToGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.addListener(Msg.Event.ItemFlyToBGoal, this.ItemFlyToBGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.addListener(Msg.Event.GameResize, this.resize, this);
        App.TimerManager.remove(this.update_time, this);

        App.MessageCenter.addListener(Msg.Event.AddStepNum, this.addStepNum, this);  //增加步数
        App.MessageCenter.addListener(Msg.Event.CutStepNum, this.CutStepNum, this);  //减少步数


        App.MessageCenter.addListener(Msg.Event.AddTimeNum, this.addTimeNum, this);  //增加步数
        App.MessageCenter.addListener(Msg.Event.CutTimeNum, this.cutTimeNum, this);  //减少步数


        App.MessageCenter.addListener(Msg.Event.AddScore, this.AddScore, this);//分数
        App.MessageCenter.addListener(Msg.Event.ItemFlyToGoal, this.ItemFlyToGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.addListener(Msg.Event.ItemFlyToBGoal, this.ItemFlyToBGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.addListener(Msg.Event.AskForIsGameOver, this.AskForIsGameOver, this);//请求游戏是否结束

        // App.MessageCenter.addListener(Msg.Event.BeginGame2,this.begin_times,this);//开始倒计时
    }

    public removeEvent() {
        App.MessageCenter.removeListener(Msg.Event.ItemFlyToGoal, this.ItemFlyToGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.removeListener(Msg.Event.ItemFlyToBGoal, this.ItemFlyToBGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.removeListener(Msg.Event.GameResize, this.resize, this);
        App.TimerManager.remove(this.update_time, this);

        App.MessageCenter.removeListener(Msg.Event.AddStepNum, this.addStepNum, this);  //增加步数
        App.MessageCenter.removeListener(Msg.Event.CutStepNum, this.CutStepNum, this);  //减少步数


        App.MessageCenter.removeListener(Msg.Event.AddTimeNum, this.addTimeNum, this);  //增加步数
        App.MessageCenter.removeListener(Msg.Event.CutTimeNum, this.cutTimeNum, this);  //减少步数


        App.MessageCenter.removeListener(Msg.Event.AddScore, this.AddScore, this);//分数
        App.MessageCenter.removeListener(Msg.Event.ItemFlyToGoal, this.ItemFlyToGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.removeListener(Msg.Event.ItemFlyToBGoal, this.ItemFlyToBGoal, this); //游戏中飞到消除目标位置
        App.MessageCenter.removeListener(Msg.Event.AskForIsGameOver, this.AskForIsGameOver, this);//请求游戏是否结束

        // App.MessageCenter.addListener(Msg.Event.BeginGame2,this.begin_times,this);//开始倒计时
    }

    /************************任务目标处理逻辑快 开始 *********************************/
    public ItemFlyToGoal(item, id: number) {
        this.failJudge(id,this.ADefeatTaskTargets1);//失败条件判定
        this.failJudge(id,this.ADefeatTaskTargets2);//失败条件判定
        this.seekitemFunction(item);//判断功能
        this.setRect(item, id);
    }
    public ItemFlyToBGoal(item, id: number){
        this.setRect1(item, id);
    }

    //是否触发失败条件
    public IsTriggerFailCondition: boolean = false;

    //实盘失败条件判断
    public failJudge(id,targets) {
        if (targets.length > 0) {
            let arr = targets;
            for (let i = 0; i < arr.length; i++) {
                let obj: any = arr[i];
                if (obj.Target == id) {
                    if (obj.num> 0) {
                        obj.num--;
                    }
                    else {
                        //满足一个失败条件，游戏需要结束
                        this.IsTriggerFailCondition = true;
                        this["fail_complete_img" + (i + 1)].visible = true;//显示对勾
                        this["fail_tex" + (i + 1)].visible = false;//隐藏数量

                    }
                    if(obj.num<=0){
                        //满足一个失败条件，游戏需要结束
                        this.IsTriggerFailCondition = true;
                        this["fail_complete_img" + (i + 1)].visible = true;//显示对勾
                        this["fail_tex" + (i + 1)].visible = false;//隐藏数量
                    }
                    this["fail_tex" + (i + 1)].text = obj.num;
                }

            }
        }

    }

    //判断块的功能 加属性
    public seekitemFunction(items: TG_Item) {
        if (items.isFunction) {
            if (items.extendType == 1)//加步数
            {
                this.addStepNum(items.extendParam);
            }
            else if (items.extendType == 2)//加时间
            {
                this.AddTime(items.extendParam)
            }
        }
        if (items.isPropBox) {
            //是道具宝箱
            //宝箱id
            let propId: number = items.propId;
            let propNum: number = items.propNum;
            App.MessageCenter.dispatch(Msg.Event.UseProp, propId, 1, propNum);//派发更新道具数量事件
        }
    }

    public time_num: number = 0;

    //设置消除格子信息
    public setRect(items, id: number) {
        try {
            let _x: number = 0;
            let _y: number = 0;
            let pos: any = items.SitePos;
            if (pos) {
                let pos1: any = items.getPosByRowCol(pos.Y, pos.X);
                _x = pos1.x;
                _y = pos1.y;
            }
            // let texture:string = (items.getChildAt(0) as TG_Object).textureName;


            let _id: number = id;//items["BlockId"];
            let obj12 = TG_MapData.getInstance().mapConfigData[_id];
            let str = LoadNetworkImageUtils.getResNameByLayerId(obj12.layerid);//obj12.image + "_png";
            let item: GatherItem1 = null;
            for (let i = 0; i < this.taskItemArr.length; i++) {
                let item1: GatherItem1 = this.taskItemArr[i];
                if (item1.id == _id) {
                    item = item1;
                    break;
                }
            }
            if (item != null) {

                var btm: egret.Bitmap = ObjectPool.pop("egret.Bitmap");
                btm.texture = RES.getRes(str);
                btm.width = TG_Item.getInstance().itemWidth;
                btm.height = TG_Item.getInstance().itemWidth;

                // btm.x = _x + GamePanel_ItemSp.getInstance().IcesSp.x - btm.width / 2;
                // btm.y = _y + GamePanel_ItemSp.getInstance().IcesSp.y - btm.height / 2;
                btm.x = _x + GamePanel.getInstance().rectSp.x - btm.width / 2;
                btm.y = _y + GamePanel.getInstance().rectSp.y - btm.height / 2;
                item.updateRectNum(1);
                GamePanel.getInstance().addChild(btm);
                egret.Tween.get(btm).wait(this.time_num * 0).to({
                    x: this.gatherSp.x + item.x + item.btm.x + this.winGroup.x,
                    y: this.gatherSp.y + item.y + item.btm.y + this.winGroup.y
                }, 500, egret.Ease.sineInOut).call(function () {
                    egret.Tween.removeTweens(btm);
                    App.DisplayUtils.removeFromParent(btm);
                    btm.texture = null;
                    ObjectPool.push(btm);
                }.bind(this), this);
            }
            else {

            }
            this.time_num++;
        } catch (e) {
            Log.getInstance().trace("报错items--->" + items + " -->" + items["BlockId"]);
        }
    }
    //设置消除格子信息 B
    public setRect1(items, id: number) {
        try {
            let _x: number = 0;
            let _y: number = 0;
            let pos: any = items.SitePos;
            if (pos) {
                let pos1: any = items.getPosByRowCol(pos.Y, pos.X);
                _x = pos1.x;
                _y = pos1.y;
            }
            let _id: number = id;
            let obj12 = TG_MapData.getInstance().mapConfigData[_id];
            let str = LoadNetworkImageUtils.getResNameByLayerId(obj12.layerid);
            let item: GatherItem1 = null;
            for (let i = 0; i < this.taskBItemArr.length; i++) {
                let item1: GatherItem1 = this.taskBItemArr[i];
                if (item1.id == _id) {
                    item = item1;
                    break;
                }
            }
            if (item != null) {

                var btm: egret.Bitmap = ObjectPool.pop("egret.Bitmap");
                btm.texture = RES.getRes(str);
                btm.width = TG_Item.getInstance().itemWidth;
                btm.height = TG_Item.getInstance().itemWidth;

                btm.x = _x + GamePanel.getInstance().rectSp.x - btm.width / 2;
                btm.y = _y + GamePanel.getInstance().rectSp.y - btm.height / 2;
                item.updateRectNum(1);
                GamePanel.getInstance().addChild(btm);
                egret.Tween.get(btm).wait(this.time_num * 0).to({
                    x: this.roleBSp.x,
                    y: this.roleBSp.y+200
                }, 500, egret.Ease.sineInOut).call(function () {
                    egret.Tween.removeTweens(btm);
                    App.DisplayUtils.removeFromParent(btm);
                    btm.texture = null;
                    ObjectPool.push(btm);
                }.bind(this), this);
            }
            else {

            }
            this.time_num++;
        } catch (e) {
            Log.getInstance().trace("报错items--->" + items + " -->" + items["BlockId"]);
        }
    }


    /************************任务目标处理逻辑快 结束*********************************/
    /******************* 更新时间 更新积分 更新步数逻辑 开始 **********************/
        //是否为限时关卡
    private isTimeLimit: boolean = false;
    //限时关卡的倒计时时长
    private timeLimitLength: number = 0;
//当前总步数
    private stepNum: number = 0;
    private step_text: eui.BitmapLabel;//显示时间和步数的文本框
    private score_num: number = 0;//游戏中的得分
    public full_all: number;//全满多少分
    public score_arr: Array<number>; //三个星星分别需要的得分
    private score_boo: Array<boolean>;//记录哪个星星已经亮了 默认都是false
    public score_tex: eui.Label;//显示当前得分的label

    public addStepNum(num: number) {
        if (this.isTimeLimit) return;
        this.set_step(1, num);
    }

    public CutStepNum(num: number) {
        if (this.isTimeLimit) return;
        this.set_step(0, num);
    }

    /**
     * 增加时间
     * @param num
     */
    public addTimeNum(num: number): void {
        if (!this.isTimeLimit) return;
        this.set_Time(1, num);
    }

    /**
     * 减少时间
     * @param num
     */
    public cutTimeNum(num: number): void {
        if (!this.isTimeLimit) return;
        this.set_Time(0, num);
    }

    public AddScore(num: number) {
        this.set_score(1, num);
    }

    public AddTime(num: number) {
        if (!this.isTimeLimit) return;
        this.set_Time(1, num);
    }

    /** 设置步数
     * @param type 0减num步  1加num步
     * @param num
     */
    public set_step(type: number, _step: number) {
        if (this.isTimeLimit) return;

        let step = Math.abs(_step);
        if (type == 1)
            this.stepNum += step;
        else
            this.stepNum -= step;

        if (this.stepNum <= 0) {
            //没有步数了，游戏需要结束
            this.stepNum = 0;
        }

        this.update_step();
    }

    /**
     *  设置时间
     * @param type 0减num时间  1加num时间
     * @param num
     */
    public set_Time(type: number, num: number) {
        let time: number = Math.abs(num);
        if (type == 1)
            this.timeLimitLength += time;
        else
            this.timeLimitLength -= time;


        this.update_step()

    }

    /**
     * 更新分数
     * @type 1：加分 0：减分
     * @num 需要加的分数
     * */
    public set_score(type: number, num: number) {
        let score = Math.abs(num);
        if (type == 1)
            this.score_num += score;
        else
            this.score_num -= score;

        for (let i = 0; i < 3; i++) {
            if (this.score_num >= this.score_arr[i] && this.score_boo[i] == false) {
                let star = this["star" + i];
                if (star) {
                    star.texture = RES.getRes("scoreStar0_png");
                }
            }
        }
        let tmp = this.score_num / this.full_all * 180;
        if (tmp > 180)
            tmp = 180;

        // this.bm1_2_1.width = tmp;
        //更新进度条
        this.angle = 180 - tmp;
        this.updateArc();

        //更新星星完毕
        this.score_tex.text = this.score_num.toString();
    }

    public update_step() {
        this.step_text.text = this.getFontText();

        if (TG_Game.currentState == 2)//游戏中
        {
            return;
        }
        else {
            if (this.downOver()) {
                this.doEndingTime();
                App.TimerManager.doTimer(2000, 1, this.GameOver, this)
                this.GameOver1(true);
            }
        }
        if (this.timeLimitLength <= 0) {
            this.timeLimitLength = 0;
            App.TimerManager.remove(this.update_time, this);
        }
    }

    /** 获取需要显示的文本，步数或者时间 */
    public getFontText(): string {
        if (this.isTimeLimit) {
            return Tool.getInstance().getTimeForTime(this.timeLimitLength);
        }
        else {
            return this.stepNum.toString();
        }
        return "";
    }

    /**
     *  更新时间
     */
    public update_time() {
        this.set_Time(0, 1);
    }

    /******************** 更新时间 更新积分 更新步数逻辑 结束 ******************************/

    /*************************** 游戏结果判定 开始****************************************/
    public game_is_over: boolean = false;
    //游戏结果 1是成功 0是失败
    private game_over = 0;
    public isComplete_over: boolean = false;

    //游戏主逻辑请求判定游戏是否结束
    public AskForIsGameOver(num: number)//最终判定函数
    {
        if (this.downOver()) {
            Log.getInstance().trace("游戏正常结束！")
            this.doEndingTime();
            App.TimerManager.doTimer(2000, 1, this.GameOver, this);
            this.GameOver1(true);
        }
        else if (this.IsTriggerFailCondition)//触发失败条件了
        {
            Log.getInstance().trace("触发失败条件，游戏结束！");
            this.doEndingTime();
            App.TimerManager.doTimer(2000, 1, this.GameOver, this);
            this.GameOver1(true);
        }
        else {
            this.GameOver1(false);
            //没有结束
            Log.getInstance().trace("游戏继续！");
        }
    }

    /**
     * 游戏结算
     */
    public doEndingTime() {
        let step: number = 0;
        if (this.isTimeLimit) {
            step = Math.ceil(this.timeLimitLength / 5);
        }
        else {
            step = this.stepNum;
        }
        //剩余步数换成得分
        this.set_score(1, step * ScoreType.ST_STEPSCORE);
    }

    //判断游戏结果
    public downOver(): boolean {
        if (this.game_is_over) return true;

        let isComplete: boolean = false;
        let isBComplete: boolean = false;
        //这里判断任务是否完成
        let completeNum = 0;
        for (let i = 0; i < this.taskItemArr.length; i++) {
            let items: GatherItem1 = this.taskItemArr[i];
            if (items.isComplete) {
                completeNum++;
            }
        }
        if (completeNum >= this.taskItemArr.length) {
            isComplete = true;
        }
        //B的任务
        let completeBNum = 0;
        for (let i = 0; i < this.taskBItemArr.length; i++) {
            let items: GatherItem1 = this.taskBItemArr[i];
            if (items.isComplete) {
                completeBNum++;
            }
        }
        if (completeBNum >= this.taskBItemArr.length) {
            isBComplete = true;
        }

        let isOver: boolean = false;

        if (isComplete) {
            this.isComplete_over = true;//任务完成标示
            App.TimerManager.remove(this.update_time, this);//清除计时器
            //任务完成了
            Log.getInstance().trace("任务完成了");
        }
        //如果是收集模式步数每了就成功
        if (isComplete ||isBComplete||
            (this.ruleType == 1 &&
                (this.stepNum <= 0 && !this.isTimeLimit)) || (this.isTimeLimit && this.timeLimitLength <= 0
            )
        ) {
            if (this.isTimeLimit && this.timeLimitLength <= 0) {
                if (this.ruleType == 1)
                    this.game_over = 1;
                else {
                    this.game_over = 0;
                }
                Log.getInstance().trace("没有时间了，游戏结束！")
            }

            if ((this.ruleType == 1 &&
                (this.stepNum <= 0 && !this.isTimeLimit))) {
                //需要比较收集的个数
                let aNum=0,bNum=0;
                for(let i=0;i<this.taskItemArr.length;i++){
                    aNum+=this.taskItemArr[i].num;
                }
                for(let i=0;i<this.taskBItemArr.length;i++){
                    bNum+=this.taskBItemArr[i].num;
                }
                 if(aNum>bNum){
                     this.game_over = 1;
                 }else {
                     this.game_over = 0;
                 }
            }
            if(this.ruleType!=1){
                if (isComplete&&!isBComplete) {
                    this.game_over = 1;
                }else {
                    this.game_over=0;
                }
                if(isBComplete){
                    this.game_over=0;
                }
            }
            isOver = true;
            let taskArr: Array<any> = [];
            for (let i = 0; i < this.taskItemArr.length; i++) {
                let items: GatherItem1 = this.taskItemArr[i];
                let objs = {};
                objs["Target"] = items.id;
                objs["Num"] = items.num;
                taskArr.push(objs);
            }
            ConfigGameData.getInstance().taskArr = taskArr.splice(0);

            this.game_is_over = true;
        }
        else if ((this.stepNum <= 0 && !this.isTimeLimit) || (this.isTimeLimit && this.timeLimitLength <= 0)) {
            isOver = true;
            //没有步数了，游戏需要结束
            this.game_over = 0;
            let taskArr: Array<any> = [];
            for (let i = 0; i < this.taskItemArr.length; i++) {
                let items: GatherItem1= this.taskItemArr[i];
                let objs = {};
                objs["Target"] = items.id;
                objs["Num"] = items.num;
                taskArr.push(objs);
            }
            ConfigGameData.getInstance().taskArr = taskArr.splice(0);

            this.game_is_over = true;
        }
        return isOver;
    }

    private GameOver() {
        if (this.game_over == 1) {
            Panel_PopupLayer.getInstance().myAlert("任务完成，游戏结束！", 2000);
        }
        else {
            if (this.isTimeLimit)
                Panel_PopupLayer.getInstance().myAlert("任务失败,游戏结束!", 2000);
            else
                Panel_PopupLayer.getInstance().myAlert("任务失败,游戏结束!", 2000);
        }
        GamePanel.getInstance().showGameOver(this.game_over);
    }

    //向游戏主逻辑发送游戏结果命令，是否可以继续操作
    private GameOver1(bool: boolean = true) {
        App.MessageCenter.dispatch(Msg.Event.IsGameOver, bool);
    }

    /*****************************游戏结果判定 结束****************************************/
    /****************************************** 321倒计时功能  开始 ************************************/
        //321动画
    public tex_1: egret.Bitmap;
    public begin_num: number = 3;

    //开始倒计时
    public begin_times() {
        if (this.isTimeLimit) {
            this.GameOver1(true);
            if (this.begin_num <= 0) {
                App.DisplayUtils.removeFromParent(this.tex_1);
                App.TimerManager.doTimer(1000, 0, this.update_time, this);
                this.GameOver1(false);
                App.MessageCenter.dispatch(Msg.Event.BeginTimeDrop);//执行掉落
                return;
            }
            if (!this.tex_1) {
                this.tex_1 = new egret.Bitmap();

            }
            this.tex_1.texture = RES.getRes("tex_" + this.begin_num + "_png");
            this.tex_1.y = Main.stageHeight / 2;// - this.tex_1.height/2;
            this.tex_1.x = Main.stageWidth / 2;// - this.tex_1.width/2
            this.tex_1.scaleY = 15;
            this.tex_1.scaleX = 15;
            Tool.getInstance().setAnchorPoint(this.tex_1);
            LayerManager.UI_Message.addChild(this.tex_1);
            let tween = egret.Tween.get(this.tex_1);
            tween.to({"scaleY": 1, "scaleX": 1}, 500);
            //tween.wait(1000);
            tween.call(function () {
                    egret.Tween.removeTweens(this.tex_1);

                    App.TimerManager.doTimer(500, 1, this.begin_times, this);
                }, this
            );
            this.begin_num--;
        }

    }

    /******************************************* 321倒计时  结束 **********************************************************************/
    public ADefeatTaskTargets1: Array<any>=[];//A失败条件1
    public ADefeatTaskTargets2: Array<any>=[];//A失败条件2
    public BDefeatTaskTargets1: Array<any>=[];//B失败条件1
    public BDefeatTaskTargets2: Array<any>=[];//B失败条件2
    public init() {
        this.avatar = 1;//初始化人物性别
        this.roleArr = [10101, 10102, 0, 0, 10201, 0, 10202, 0, 0, 0];//初始化任务模型信息
        this.roleSp = TG_Role_Model.createModel(this.avatar, this.roleArr, 0.42);
        this.addChild(this.roleSp);
        this.roleSp.play();
        this.roleSp.y = 80;

        if(!TG_Stage.SingelModel){
            //Pk模式
            this.avatarB=2;
            this.roleArr = [20101, 20102, 0, 0, 20201, 0, 20202, 0, 0, 0];//初始化任务模型信息
            this.roleBSp = TG_Role_Model.createModel(this.avatarB, this.roleArr, 0.42);
            this.addChild(this.roleBSp);
            this.roleBSp.play();
            this.roleBSp.x=Main.stageWidth-360;
            this.roleBSp.y = 80;
        }

        /*********************进度条遮罩*******************************/
        this.progressSp = new egret.Shape();
        this.updateArc();
        this.maskGroup.addChild(this.progressSp);
        this.progressSp.y = -this.progressSp.height;
        this.progressSp.x = -this.progressSp.width / 2;
        this.progressSp.alpha = 0.8;
        this.scoreBgBtn.mask = this.progressSp;
        /*****************************进度条遮罩************************/
    }
    //第二次打开面板的时候需要初始化面板数据
    public refreshData() {
        //初始化任务系统
        this.taskArr = TG_MapData.getInstance().stageData["Stage"].Targets1;
        this.taskBArr = TG_MapData.getInstance().stageData["Stage"].Targets2;
        //0:消除 1:收集
        this.ruleType = TG_MapData.getInstance().stageData["Stage"].RuleType;
        this.gatherSp = new egret.Sprite();
        this.gatherSp.x = 10;
        this.gatherSp.y = 40;
        this.shenglimubiao.addChild(this.gatherSp);
        this.taskItemArr = [];
        this.taskBItemArr = [];

        this.gatherSp.removeChildren();
        this.taskItemArr = [];
        this.taskBItemArr = [];
        this.addTesk();


        this.IsTriggerFailCondition = false;//重置失败条件
        this.game_is_over = false;
        //游戏结果 1是成功 0是失败
        this.game_over = 0;
        this.isComplete_over = false;

        this.time_num = 0;
        this.begin_num = 3;//倒计时时长
        this.score_num = 0;//游戏中的得分

        this.isTimeLimit = TG_MapData.getInstance().stageData["Stage"].IsTimeLimit;//是否为限时关卡
        this.timeLimitLength = TG_MapData.getInstance().stageData["Stage"].TimeLimitLength;//限时关卡的倒计时时长
        this.stepNum = TG_MapData.getInstance().stageData["Stage"].Step;//初始步数

        let baseNum: number = 1500;//计算积分基数
        let scaleArr = [0.2, 0.4, 0.7];
        let step: number = 0;
        if (this.isTimeLimit) {
            step = Math.ceil(this.timeLimitLength / 5);
        }
        else {
            step = this.stepNum;
        }
        this.full_all = step * (1500 * 0.7);
        this.score_arr = [baseNum * scaleArr[0] * step, baseNum * scaleArr[1] * step, baseNum * scaleArr[2] * step];
        this.score_boo = [false, false, false];

        /**********************  失败条件 目前是做单人的  *********************/
        this["fail_complete_img1"].visible = false;
        this["fail_complete_img2"].visible = false;
        this["fail_group1"].visible = false;
        this["fail_group2"].visible = false;
        //获取失败条件
        if(TG_Stage.IsElementLimit1){
            this.ADefeatTaskTargets1 = this.getAllFail(TG_Stage.ALimitTargets1);
            this.BDefeatTaskTargets1 = this.getAllFail(TG_Stage.BLimitTargets1);
        }
        if(TG_Stage.IsElementLimit2){
            this.ADefeatTaskTargets2 = this.getAllFail(TG_Stage.ALimitTargets2);
            this.BDefeatTaskTargets2 = this.getAllFail(TG_Stage.BLimitTargets2);
        }

        if (this.ADefeatTaskTargets1.length > 0) {
            //刷新失败条件列表
            let arr = this.ADefeatTaskTargets1.concat(this.ADefeatTaskTargets2);
            for (let i = 0; i < arr.length; i++) {
                let obj: any = arr[i];
                this["fail_group" + (i + 1)].visible = true;
                this["fail_img" + (i + 1)].source = obj.url;
                this["fail_tex" + (i + 1)].text = obj.num;
                this["fail_complete_img" + (i + 1)].visible = false;//隐藏对勾
                this["fail_tex" + (i + 1)].visible = true;//显示数量
            }
            //
        }
        this.score_tex.text = this.score_num.toString();//初始化得分显示
        this.step_text.text = this.getFontText();//初始化时间或者步数显示

        if (this.isTimeLimit) {
            this.ruleImg.source = "ui_battle_word_shijian_png";
        }
        else {
            this.ruleImg.source = "ui_battle_word_bushu_png";
        }
        this.jiaodu = 180;
        this.angle = 180;
        this.updateArc();
        //初始化星星
        for (let i = 0; i < 3; i++) {
            let star = this["star" + i];
            if (star) {
                star.texture = RES.getRes("scoreStar1_png");
            }
        }


    }

    ///////////////// 获取失败条件 开始//////////////////
    //获取玩家失败条件item
    public getAllFail(targets) {
        let arr = [];
        let targets1=targets;
        let listData=this.getListSp(targets1);
        if (listData.length > 0) {
            for (let i = 0; i < listData.length; i++) {
                arr.push(listData[i]);
            }
        }
        return arr;
        // let arr1 = [];
        // let arr2 = [];
        //
        // let singelModel: boolean = TG_Stage.SingelModel;
        // // this.ruleType
        // if (TG_Stage.IsElementLimit1)//是否限制1
        // {
        //     let targets1 = TG_Stage.ALimitTargets1;
        //     let listData1 = this.getListSp(targets1);
        //     if (listData1.length > 0) {
        //         for (let i = 0; i < listData1.length; i++) {
        //             arr1.push(listData1[i]);
        //         }
        //     }
        //
        //     let targets2 = TG_Stage.BLimitTargets1;
        //     let listData2 = this.getListSp(targets2);
        //     if (listData2.length > 0) {
        //         for (let i = 0; i < listData2.length; i++) {
        //             arr2.push(listData2[i]);
        //         }
        //     }
        // }
        //
        // if (TG_Stage.IsElementLimit2)//是否限制2
        // {
        //     let targets1 = TG_Stage.ALimitTargets2;
        //     let listData1 = this.getListSp(targets1);
        //     if (listData1.length > 0) {
        //         for (let i = 0; i < listData1.length; i++) {
        //             arr1.push(listData1[i]);
        //         }
        //     }
        //     let targets2 = TG_Stage.ALimitTargets2;
        //     let listData2 = this.getListSp(targets2);
        //     if (listData2.length > 0) {
        //         for (let i = 0; i < listData2.length; i++) {
        //             arr2.push(listData2[i]);
        //         }
        //     }
        // }
        // if (arr1.length > 0) {
        //     arr.push(arr1);
        // }
        // if (arr2.length > 0) {
        //     arr.push(arr2);
        // }
        // return arr;
    }

    //获取一条任务目标
    public getListSp(itemArr: Array<any>): any {
        let arr = [];
        for (let i = 0; i < itemArr.length; i++) {
            let obj11 = TG_MapData.getInstance().mapConfigData[itemArr[i]["Target"]];
            let url = LoadNetworkImageUtils.getResNameByLayerId(obj11.layerid);
            let num = itemArr[i]["Cur"];
            arr.push({"url": url, "num": num, "Target": obj11.layerid});
        }
        return arr;
    }

    ///////////////// 获取失败条件 结束///////////////////////
    public jiaodu: number = 180;
    public progressSp: egret.Shape;
    public angle: number = 180;

    public updateArc() {
        if (this.angle <= 0) {
            this.angle = 0.001;
        }
        let radius = 380 / 2;
        this.progressSp.graphics.clear();
        this.progressSp.graphics.beginFill(0xff0000);
        this.progressSp.graphics.moveTo(radius, radius);
        this.progressSp.graphics.lineTo(radius * 2, radius);
        this.progressSp.graphics.drawArc(radius, radius, radius, 0, this.angle * Math.PI / 180, true);
        this.progressSp.graphics.lineTo(radius, radius);
        this.progressSp.graphics.endFill();
    }

    //添加任务系统
    private addTesk() {
        //初始化任务
        for (var i = 0; i < this.taskArr.length; i++) {
            let obj: any = this.taskArr[i];

            let obj11 = TG_MapData.getInstance().mapConfigData[obj.Target];
            let str = LoadNetworkImageUtils.getResNameByLayerId(obj11.layerid);//obj11.image+"_png";
            let item: GatherItem1 = new GatherItem1(str, obj.Num, this.ruleType, obj.Target);
            let child_num = this.gatherSp.numChildren;
            //行
            var r: number = Math.floor(child_num / 2);
            //列
            var c: number = child_num % 2;
            item.x = (c) * (item.width + 15);
            item.y = (r) * (item.height + 10);
            this.gatherSp.addChild(item);
            this.taskItemArr.push(item);
        }
        //B任务
        for (var i = 0; i < this.taskBArr.length; i++) {
            let obj: any = this.taskBArr[i];

            let obj11 = TG_MapData.getInstance().mapConfigData[obj.Target];
            let str = LoadNetworkImageUtils.getResNameByLayerId(obj11.layerid);//obj11.image+"_png";
            let item: GatherItem1 = new GatherItem1(str, obj.Num, this.ruleType, obj.Target);
            let child_num = this.gatherSp.numChildren;
            this.taskBItemArr.push(item);
        }
    }

    /**
     *  删除任务
     */
    public removeTesk() {
        for (let i = 0; i < this.taskItemArr.length; i++) {
            let item: GatherItem1 = this.taskItemArr[i];
            App.DisplayUtils.removeFromParent(item);

        }
        this.taskItemArr = [];
        for (let i = 0; i < this.taskBItemArr.length; i++) {
            let item: GatherItem1 = this.taskBItemArr[i];
            App.DisplayUtils.removeFromParent(item);

        }
        this.taskBItemArr = [];
    }

    //适配
    private resize() {

    }
}

/**
 *  收集items
 */
class GatherItem1 extends egret.Sprite {
    public num_tex: egret.TextField;
    public ruleType: number;
    public num: number;
    public id: number;
    public btm: egret.Bitmap;

    //是否完成
    public isComplete: boolean = false;

    /**
     *
     * @param textureName 图片文理
     * @param num 收集个数
     * @param ruleType 游戏规则 0:消除 1:收集
     */
    public constructor(textureName: string, _num: number, _ruleType: number, _id) {
        super();
        this.ruleType = _ruleType;
        if (this.ruleType == 1)
            this.num = 0;
        else
            this.num = _num;

        this.id = _id;

        this.btm = TG_Object.Create(textureName);
        this.btm.width = 70;
        this.btm.height = 70;
        this.addChild(this.btm);
        this.num_tex = new egret.TextField();
        this.num_tex.textAlign = "center";
        this.num_tex.size = 33;
        this.num_tex.textColor = 0xffffff;
        this.num_tex.width = 70;
        this.num_tex.strokeColor = 0x000000;
        this.num_tex.stroke = 2;
        this.num_tex.text = "" + this.num;
        this.num_tex.height = this.num_tex.textHeight;
        this.num_tex.x = this.btm.x + this.btm.width / 2 - this.num_tex.width / 2;
        this.num_tex.y = this.btm.y + this.btm.height - this.num_tex.height;
        this.addChild(this.num_tex);
    }

    public updateRectNum(_num: number) {
        if (this.ruleType == 0 && this.isComplete == false) {
            this.num -= _num;
            if (this.num <= 0) {
                this.num = 0;
                //完成
                let b = TG_Object.Create("duihao_png");
                b.x = this.btm.x + this.btm.width - b.width / 2 - 10;
                b.y = this.btm.y + this.btm.height - b.height / 2 - 10;
                this.addChild(b);
                this.isComplete = true;
            }

        }
        else if (this.ruleType == 1) {
            this.num += _num;
        }
        if (this.num > 0)
            this.num_tex.text = "" + this.num;
        else
            this.num_tex.text = "";
    }
}
